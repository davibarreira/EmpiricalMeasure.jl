var documenterSearchIndex = {"docs":
[{"location":"#EmpiricalMeasures.jl","page":"Home","title":"EmpiricalMeasures.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package implements empirical probability measures in Julia.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package is compatible with Distributions.jl, and creates a new distribution called MvDiscreteNonParametric which is a multivariate version of DiscreteNonParametric.","category":"page"},{"location":"#Basic-Use","page":"Home","title":"Basic Use","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Let's do a quick overview of how to use this package.","category":"page"},{"location":"#Declaring-(Multivariate)-Discrete-Non-Parametric-Measures","page":"Home","title":"Declaring (Multivariate) Discrete Non-Parametric Measures","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package provides the function empiricalmeasure(support, p), which dispatches to either DiscreteNonParametric (1D case from Distributions.jl) or MvDiscreteNonParametric based on the support.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using EmpiricalMeasures\nusing LinearAlgebra\n\n# 1D DiscreteNonParametric example\nν = empiricalmeasure(rand(10), normalize!(rand(10),1))\n\n# MvDiscreteNonParametric example\nμ = empiricalmeasure(rand(10,2), normalize!(rand(10),1))","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note that in the example above, the multivariate discrete measure μ was constructed using a matrix. The default behavior is to interpret the rows as samples, thus, μ is a probability measure in ℝ² with 10 \"mass-points\". If all points have the same probability, you can omit the p and just do","category":"page"},{"location":"","page":"Home","title":"Home","text":"μ = empiricalmeasure(rand(10,2))","category":"page"},{"location":"","page":"Home","title":"Home","text":"Instead of passing matrices, one can also pass an array of arrays, e.g. empiricalmeasure([[0,0],[1,1]]). One can also use MvDiscreteNonParametric to declare in  multivariate discrete distributions without the possibility of dispatching for the 1D case.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using EmpiricalMeasures\nusing LinearAlgebra\nusing ArraysOfArrays\n\nn = 4 # number of \"samples\"\nm = 2 # dimension of each \"sample\"\nA = nestedview(rand(n,m)')\np = normalize!(rand(n),1);\n\nμ = MvDiscreteNonParametric(A,p)","category":"page"},{"location":"#Basic-Functionalities","page":"Home","title":"Basic Functionalities","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package implements all the basic functionalities suggested by Distributions.jl for new multivariate distributions.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using EmpiricalMeasures\n\np = ([3/5, 1/5, 1/5])\nA = [[1,0],[1,1],[0,1]]\nμ = MvDiscreteNonParametric(A,p)\n\nlength(μ) # returns 2\nsize(μ) # returns (10,2)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note that μ is of type ::MvDiscreteNonParametric which is a struct containing the support and the probability of each point.","category":"page"},{"location":"","page":"Home","title":"Home","text":"μ.support, μ.p ","category":"page"},{"location":"","page":"Home","title":"Home","text":"([[1, 0], [1, 1], [0, 1]], [0.6, 0.2, 0.2])","category":"page"},{"location":"","page":"Home","title":"Home","text":"The support and probabilities can also be obtained using support(μ) and probs(μ).","category":"page"},{"location":"","page":"Home","title":"Home","text":"As in any distribution from Distributions.jl, we can easily calculate things like the mean, variance, covariance, and even sample from it:","category":"page"},{"location":"","page":"Home","title":"Home","text":"mean(μ)\nvar(μ)\ncov(μ)\n\nrand(μ,10)","category":"page"},{"location":"","page":"Home","title":"Home","text":"2×10 Matrix{Int64}:\n 1  0  1  1  1  1  1  1  0  1\n 1  1  1  0  0  0  0  0  1  0","category":"page"},{"location":"#EmpiricalMeasures.jl-vs-EmpiricalDistributions.jl-vs-EmpiricalCDFs.jl","page":"Home","title":"EmpiricalMeasures.jl vs EmpiricalDistributions.jl vs EmpiricalCDFs.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Let's clarify the difference between EmpiricalMeasures.jl and other similar packages.","category":"page"},{"location":"","page":"Home","title":"Home","text":"EmpiricalMeasures.jl - Implements a multivariate discrete distribution as a sum of weighted Dirac measures;\nEmpiricalDistributions.jl - Provides \"binned approximations\" of continuous distributions;\nEmpiricalCDFs.jl - Computes the cumulative density function of 1D arrays.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Thus, each package fulfills very different tasks.","category":"page"},{"location":"#Future-Plans","page":"Home","title":"Future Plans","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"At the moment, EmpiricalMeasures.jl only produces probability measures in ℝⁿ. The goal is to extend this first, by making it compatible with MeasureTheory.jl using MeasureBase.jl, and thus, allow for measures which do not sum to 1. Also, the goal is to generalize for any non-parametric finite discrete measures (this might be too ambitious).","category":"page"},{"location":"#Docs","page":"Home","title":"Docs","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"MvDiscreteNonParametric\nempiricalmeasure","category":"page"},{"location":"#EmpiricalMeasures.MvDiscreteNonParametric","page":"Home","title":"EmpiricalMeasures.MvDiscreteNonParametric","text":"MvDiscreteNonParametric(\n    support::AbstractVector,\n    p::AbstractVector{<:Real}=fill(inv(length(support)), length(support)),\n)\n\nConstruct a multivariate discrete nonparametric probability distribution with support and corresponding probabilities p. If the probability vector argument is not passed, then equal probability is assigned to each entry in the support.\n\nExamples\n\nusing ArraysOfArrays\n# rows correspond to samples\nμ = MvDiscreteNonParametric(nestedview(rand(7,3)'))\n\n# columns correspond to samples\nν = MvDiscreteNonParametric(nestedview(rand(7,3)))\n\n\n\n\n\nMvDiscreteNonParametric(\n    support::Matrix{<:Real},\n    p::AbstractVector{<:Real}=fill(inv(length(support)), length(support)\n)\n\nConstruct a multivariate discrete nonparametric probability distribution from a matrix as support where each row is a sample, and corresponding probabilities p. If the probability vector argument is not passed, then equal probability is assigned to each entry in the support.\n\nExamples\n\n# the rows correspond to the samples\nusing LinearAlgebra\nμ = MvDiscreteNonParametric(rand(10,3), normalize!(rand(10),1))\n\n\n\n\n\n","category":"type"},{"location":"#EmpiricalMeasures.empiricalmeasure","page":"Home","title":"EmpiricalMeasures.empiricalmeasure","text":"empiricalmeasure(\n    support::AbstractVector,\n    probs::AbstractVector{<:Real}=fill(inv(length(support)), length(support)),\n)\n\nConstruct a finite discrete probability measure with support and corresponding probabilities. If the probability vector argument is not passed, then equal probability is assigned to each entry in the support.\n\nExamples\n\nusing ArraysOfArrays\n# rows correspond to samples\nμ = empiricalmeasure(nestedview(rand(7,3)'), normalize!(rand(10),1))\n\n# columns correspond to samples, each with equal probability\nν = empiricalmeasure(nestedview(rand(3,12)))\n\nnote: Note\nIf support is a 1D vector, the constructed measure will be sorted, e.g. for mu = empiricalmeasure([3, 1, 2],[0.5, 0.2, 0.3]), then mu.support will be [1, 2, 3] and mu.p will be [0.2, 0.3, 0.5]. Also, avoid passing 1D distributions as RowVecs(rand(3)) or [[1],[3],[4]], since this will be dispatched to the multivariate case instead of the univariate case for which the algorithm is more efficient.\n\n\n\n\n\nempiricalmeasure(\n    support::Matrix{<:Real},\n    probs::AbstractVector{<:Real}=fill(inv(length(support)), length(support)),\n)\n\nConstruct a multivariate empirical measure from a matrix as support and sample by rows.\n\nExamples\n\nusing ArraysOfArrays\n# the rows correspond to the samples\nμ = empiricalmeasure(rand(7,3), normalize!(rand(10),1))\n\n\n\n\n\n","category":"function"}]
}
